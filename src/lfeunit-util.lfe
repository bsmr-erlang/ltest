;;;; Utility functions
;;;;
(defmodule lfeunit-util
  (export all))

(include-lib "include/lfeunit-macros.lfe")

(defun get-test-beams ()
  "Get the compiled .beam files, but without the .beam extension. The list of
  files generated by this function are meant to be consumed by (code:load_abs)."
  (lists:map
    #'filename:rootname/1
    (filelib:wildcard
      (filename:join (list ".eunit" "*.beam")))))

(defun get-integration-beams ()
  (lists:filter
    #'integration?/1
    (get-test-beams)))

(defun get-system-beams ()
  (lists:filter
    #'system?/1
    (get-test-beams)))

(defun get-unit-beams ()
  (lists:filter
    #'unit?/1
    (get-test-beams)))

(defun has-behaviour? (beam type)
  (lists:member
    type
    (lfe-utils:get-beam-behaviors beam)))

(defun integration? (beam)
  (has-behaviour? beam 'lfeunit-integration))

(defun system? (beam)
  (has-behaviour? beam 'lfeunit-system))

(defun unit? (beam)
  (has-behaviour? beam 'lfeunit-unit))

(defmacro DEFAULT-DATA ()
  "This macro returns the boilerplate needed for every assertion's failure
  cases."
  `(list
     (tuple 'module (MODULE))
     (tuple 'line (LINE))))

(defun add-data (key value data)
  "A utility function for appending to assert* result data."
  (++ data (list (tuple key value))))

(defun get-failure-data (expected expression)
  "Building upon the boilerplate data returned from DEFAULT-DATA, this function
  gets the rest of the data needed when returning results for a failed
  assertion."
  (let* ((value (eval expression))
         (expr-data (add-data 'expression expression (DEFAULT-DATA)))
         (expt-data (add-data 'expected expected expr-data)))
    (add-data 'value value expt-data)))

(defun get-exception-data (expected-class expected-term expression)
  "Building upon the boilerplate data returned from DEFAULT-DATA, this function
  gets the rest of the data needed when returning results for a failed
  exception assertion."
  (let ((pattern
          (++
            '"{ " (atom_to_list expected-class)
            '" , " (atom_to_list expected-term)
            '" , [...] }"))
       (expr-data (add-data 'expression expression (DEFAULT-DATA))))
    (add-data 'pattern pattern expr-data)))
